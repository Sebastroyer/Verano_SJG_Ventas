@using Sales.Shared.Entities
@using Sales.WEB.Repositories

@page "/categories"
@inject IRepository Repository

@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3> Categorias </h3>

<a class="btn btn-primary" href="/categories/create"> Nueva categoria</a>

<GenericList MyList="Categories">

    <Body>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Categorias</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=> DeleteAsync(category.Id))>Borrar</button>
                        </td>
                        <td>

                            @category.Name

                        </td>
                    </tr>
                }

            </tbody>
        </table>

    </Body>

</GenericList>



@code {
    public List<Category>? Categories { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHppt = await Repository.Get<List<Category>>("api/categories");
        Categories = responseHppt.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar el registro?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Zi",
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var responseHttp = await Repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}   